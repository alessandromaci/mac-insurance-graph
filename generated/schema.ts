// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PoolEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolEntity", id.toString(), this);
    }
  }

  static load(id: string): PoolEntity | null {
    return changetype<PoolEntity | null>(store.get("PoolEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get poolId(): i32 {
    let value = this.get("poolId");
    return value!.toI32();
  }

  set poolId(value: i32) {
    this.set("poolId", Value.fromI32(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get basePrice(): BigInt {
    let value = this.get("basePrice");
    return value!.toBigInt();
  }

  set basePrice(value: BigInt) {
    this.set("basePrice", Value.fromBigInt(value));
  }

  get tresholdPrice(): BigInt {
    let value = this.get("tresholdPrice");
    return value!.toBigInt();
  }

  set tresholdPrice(value: BigInt) {
    this.set("tresholdPrice", Value.fromBigInt(value));
  }

  get feePercentage(): i32 {
    let value = this.get("feePercentage");
    return value!.toI32();
  }

  set feePercentage(value: i32) {
    this.set("feePercentage", Value.fromI32(value));
  }

  get insuranceLiquidityAdded(): BigInt {
    let value = this.get("insuranceLiquidityAdded");
    return value!.toBigInt();
  }

  set insuranceLiquidityAdded(value: BigInt) {
    this.set("insuranceLiquidityAdded", Value.fromBigInt(value));
  }

  get startDate(): BigInt {
    let value = this.get("startDate");
    return value!.toBigInt();
  }

  set startDate(value: BigInt) {
    this.set("startDate", Value.fromBigInt(value));
  }

  get endDate(): BigInt {
    let value = this.get("endDate");
    return value!.toBigInt();
  }

  set endDate(value: BigInt) {
    this.set("endDate", Value.fromBigInt(value));
  }
}

export class InsuranceRequestEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save InsuranceRequestEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type InsuranceRequestEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("InsuranceRequestEntity", id.toString(), this);
    }
  }

  static load(id: string): InsuranceRequestEntity | null {
    return changetype<InsuranceRequestEntity | null>(
      store.get("InsuranceRequestEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value!.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get poolId(): i32 {
    let value = this.get("poolId");
    return value!.toI32();
  }

  set poolId(value: i32) {
    this.set("poolId", Value.fromI32(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get insuranceRequester(): Bytes {
    let value = this.get("insuranceRequester");
    return value!.toBytes();
  }

  set insuranceRequester(value: Bytes) {
    this.set("insuranceRequester", Value.fromBytes(value));
  }

  get feeAmount(): BigInt {
    let value = this.get("feeAmount");
    return value!.toBigInt();
  }

  set feeAmount(value: BigInt) {
    this.set("feeAmount", Value.fromBigInt(value));
  }

  get insuranceLiquidityRequest(): BigInt {
    let value = this.get("insuranceLiquidityRequest");
    return value!.toBigInt();
  }

  set insuranceLiquidityRequest(value: BigInt) {
    this.set("insuranceLiquidityRequest", Value.fromBigInt(value));
  }
}
