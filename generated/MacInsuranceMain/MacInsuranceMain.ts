// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class InsuranceRequestCreated extends ethereum.Event {
  get params(): InsuranceRequestCreated__Params {
    return new InsuranceRequestCreated__Params(this);
  }
}

export class InsuranceRequestCreated__Params {
  _event: InsuranceRequestCreated;

  constructor(event: InsuranceRequestCreated) {
    this._event = event;
  }

  get poolId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get insuranceRequester(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get liquidtyToInsure(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class PoolUpdated extends ethereum.Event {
  get params(): PoolUpdated__Params {
    return new PoolUpdated__Params(this);
  }
}

export class PoolUpdated__Params {
  _event: PoolUpdated;

  constructor(event: PoolUpdated) {
    this._event = event;
  }

  get poolId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get basePrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tresholdPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get liquidityAdded(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get startDate(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get endDate(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class MacInsuranceMain__initPoolResultValue0Struct extends ethereum.Tuple {
  get id(): i32 {
    return this[0].toI32();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get totalLiquidity(): BigInt {
    return this[2].toBigInt();
  }

  get priceLossCover(): BigInt {
    return this[3].toBigInt();
  }

  get basePrice(): BigInt {
    return this[4].toBigInt();
  }

  get insuranceTreshold(): BigInt {
    return this[5].toBigInt();
  }

  get fee(): i32 {
    return this[6].toI32();
  }

  get startDate(): BigInt {
    return this[7].toBigInt();
  }

  get endDate(): BigInt {
    return this[8].toBigInt();
  }
}

export class MacInsuranceMain__insuranceRequestsResult {
  value0: i32;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class MacInsuranceMain__liquiditySupplyListResult {
  value0: i32;
  value1: Address;
  value2: BigInt;

  constructor(value0: i32, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class MacInsuranceMain__poolDataListResult {
  value0: i32;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: i32;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: i32,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: i32,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }
}

export class MacInsuranceMain extends ethereum.SmartContract {
  static bind(address: Address): MacInsuranceMain {
    return new MacInsuranceMain("MacInsuranceMain", address);
  }

  id(): i32 {
    let result = super.call("id", "id():(uint16)", []);

    return result[0].toI32();
  }

  try_id(): ethereum.CallResult<i32> {
    let result = super.tryCall("id", "id():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  initPool(
    _tokenAddress: Address,
    _priceFeed: Address,
    _insuranceLossCoverage: BigInt,
    _fee: i32,
    _startDateFromDeployInSeconds: BigInt,
    _endDateFromDeployInSeconds: BigInt
  ): MacInsuranceMain__initPoolResultValue0Struct {
    let result = super.call(
      "initPool",
      "initPool(address,address,int256,uint8,uint256,uint256):((uint16,address,uint256,uint256,int256,int256,uint8,uint256,uint256))",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromAddress(_priceFeed),
        ethereum.Value.fromSignedBigInt(_insuranceLossCoverage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_fee)),
        ethereum.Value.fromUnsignedBigInt(_startDateFromDeployInSeconds),
        ethereum.Value.fromUnsignedBigInt(_endDateFromDeployInSeconds)
      ]
    );

    return changetype<MacInsuranceMain__initPoolResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_initPool(
    _tokenAddress: Address,
    _priceFeed: Address,
    _insuranceLossCoverage: BigInt,
    _fee: i32,
    _startDateFromDeployInSeconds: BigInt,
    _endDateFromDeployInSeconds: BigInt
  ): ethereum.CallResult<MacInsuranceMain__initPoolResultValue0Struct> {
    let result = super.tryCall(
      "initPool",
      "initPool(address,address,int256,uint8,uint256,uint256):((uint16,address,uint256,uint256,int256,int256,uint8,uint256,uint256))",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromAddress(_priceFeed),
        ethereum.Value.fromSignedBigInt(_insuranceLossCoverage),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_fee)),
        ethereum.Value.fromUnsignedBigInt(_startDateFromDeployInSeconds),
        ethereum.Value.fromUnsignedBigInt(_endDateFromDeployInSeconds)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MacInsuranceMain__initPoolResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  insuranceRequests(
    param0: i32,
    param1: Address
  ): MacInsuranceMain__insuranceRequestsResult {
    let result = super.call(
      "insuranceRequests",
      "insuranceRequests(uint16,address):(uint16,address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new MacInsuranceMain__insuranceRequestsResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_insuranceRequests(
    param0: i32,
    param1: Address
  ): ethereum.CallResult<MacInsuranceMain__insuranceRequestsResult> {
    let result = super.tryCall(
      "insuranceRequests",
      "insuranceRequests(uint16,address):(uint16,address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MacInsuranceMain__insuranceRequestsResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  liquiditySupplyList(
    param0: i32
  ): MacInsuranceMain__liquiditySupplyListResult {
    let result = super.call(
      "liquiditySupplyList",
      "liquiditySupplyList(uint16):(uint16,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return new MacInsuranceMain__liquiditySupplyListResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_liquiditySupplyList(
    param0: i32
  ): ethereum.CallResult<MacInsuranceMain__liquiditySupplyListResult> {
    let result = super.tryCall(
      "liquiditySupplyList",
      "liquiditySupplyList(uint16):(uint16,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MacInsuranceMain__liquiditySupplyListResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  poolDataList(param0: i32): MacInsuranceMain__poolDataListResult {
    let result = super.call(
      "poolDataList",
      "poolDataList(uint16):(uint16,address,uint256,uint256,int256,int256,uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return new MacInsuranceMain__poolDataListResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_poolDataList(
    param0: i32
  ): ethereum.CallResult<MacInsuranceMain__poolDataListResult> {
    let result = super.tryCall(
      "poolDataList",
      "poolDataList(uint16):(uint16,address,uint256,uint256,int256,int256,uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MacInsuranceMain__poolDataListResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  supplyPool(_id: i32, _amount: BigInt): BigInt {
    let result = super.call(
      "supplyPool",
      "supplyPool(uint16,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_id)),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_supplyPool(_id: i32, _amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "supplyPool",
      "supplyPool(uint16,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_id)),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class InitPoolCall extends ethereum.Call {
  get inputs(): InitPoolCall__Inputs {
    return new InitPoolCall__Inputs(this);
  }

  get outputs(): InitPoolCall__Outputs {
    return new InitPoolCall__Outputs(this);
  }
}

export class InitPoolCall__Inputs {
  _call: InitPoolCall;

  constructor(call: InitPoolCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _priceFeed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _insuranceLossCoverage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _fee(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _startDateFromDeployInSeconds(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _endDateFromDeployInSeconds(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitPoolCall__Outputs {
  _call: InitPoolCall;

  constructor(call: InitPoolCall) {
    this._call = call;
  }

  get value0(): InitPoolCallValue0Struct {
    return changetype<InitPoolCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class InitPoolCallValue0Struct extends ethereum.Tuple {
  get id(): i32 {
    return this[0].toI32();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get totalLiquidity(): BigInt {
    return this[2].toBigInt();
  }

  get priceLossCover(): BigInt {
    return this[3].toBigInt();
  }

  get basePrice(): BigInt {
    return this[4].toBigInt();
  }

  get insuranceTreshold(): BigInt {
    return this[5].toBigInt();
  }

  get fee(): i32 {
    return this[6].toI32();
  }

  get startDate(): BigInt {
    return this[7].toBigInt();
  }

  get endDate(): BigInt {
    return this[8].toBigInt();
  }
}

export class RequestInsuranceCall extends ethereum.Call {
  get inputs(): RequestInsuranceCall__Inputs {
    return new RequestInsuranceCall__Inputs(this);
  }

  get outputs(): RequestInsuranceCall__Outputs {
    return new RequestInsuranceCall__Outputs(this);
  }
}

export class RequestInsuranceCall__Inputs {
  _call: RequestInsuranceCall;

  constructor(call: RequestInsuranceCall) {
    this._call = call;
  }

  get _id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestInsuranceCall__Outputs {
  _call: RequestInsuranceCall;

  constructor(call: RequestInsuranceCall) {
    this._call = call;
  }
}

export class RequestReimbursementCall extends ethereum.Call {
  get inputs(): RequestReimbursementCall__Inputs {
    return new RequestReimbursementCall__Inputs(this);
  }

  get outputs(): RequestReimbursementCall__Outputs {
    return new RequestReimbursementCall__Outputs(this);
  }
}

export class RequestReimbursementCall__Inputs {
  _call: RequestReimbursementCall;

  constructor(call: RequestReimbursementCall) {
    this._call = call;
  }

  get _id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class RequestReimbursementCall__Outputs {
  _call: RequestReimbursementCall;

  constructor(call: RequestReimbursementCall) {
    this._call = call;
  }
}

export class SupplyPoolCall extends ethereum.Call {
  get inputs(): SupplyPoolCall__Inputs {
    return new SupplyPoolCall__Inputs(this);
  }

  get outputs(): SupplyPoolCall__Outputs {
    return new SupplyPoolCall__Outputs(this);
  }
}

export class SupplyPoolCall__Inputs {
  _call: SupplyPoolCall;

  constructor(call: SupplyPoolCall) {
    this._call = call;
  }

  get _id(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SupplyPoolCall__Outputs {
  _call: SupplyPoolCall;

  constructor(call: SupplyPoolCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
